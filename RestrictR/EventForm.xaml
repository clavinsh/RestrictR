<?xml version="1.0" encoding="utf-8"?>
<Page
    x:Class="RestrictR.EventForm"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:RestrictR"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:collections="using:System.Collections"
    xmlns:dataannotations="using:System.ComponentModel.DataAnnotations"
    xmlns:interactions="using:Microsoft.Xaml.Interactions.Core"
    xmlns:attached="using:RestrictR.Attached"
    xmlns:interactivity="using:Microsoft.Xaml.Interactivity"
    xmlns:converters="using:CommunityToolkit.WinUI.UI.Converters"
    
    d:DataContext="{d:DesignInstance Type=local:EventViewModel}"
    mc:Ignorable="d"
    Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">

    <Page.Resources>
        <DataTemplate x:Key="ValidationResultTemplate" x:DataType="dataannotations:ValidationResult">
            <Border Margin="5" Padding="10" Background="LightPink" CornerRadius="5">
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left">
                    <TextBlock Text="Error: " FontWeight="Bold"/>
                    <TextBlock Text="{Binding ErrorMessage}" />
                </StackPanel>
            </Border>
        </DataTemplate>

        <converters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
    </Page.Resources>
    

    <StackPanel VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
        <DatePicker Header="Start Date" Date="{x:Bind ViewModel.StartDate, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"></DatePicker>
        <TimePicker Header="Start Time" Time="{x:Bind ViewModel.StartTime, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"></TimePicker>
        <TimePicker Header="Duration" Time="{x:Bind ViewModel.Event.Duration, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"></TimePicker>

        <ComboBox ItemsSource="{x:Bind ViewModel.RecurrenceItems}"
                  SelectedValue="{x:Bind ViewModel.Recurrence, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                  SelectedValuePath="Value" 
                  DisplayMemberPath="Text" />

        <StackPanel>
            <TextBlock Text="Blocked App Install Locations" FontWeight="Bold"/>
            <ListView ItemsSource="{x:Bind ViewModel.Event.BlockedAppInstallLocations, Mode=OneWay}">
                <ListView.ItemTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding}"/>
                    </DataTemplate>
                </ListView.ItemTemplate>
            </ListView>
            <StackPanel Orientation="Horizontal">
                <TextBox Width="200" PlaceholderText="Add new location" Text="{x:Bind ViewModel.NewAppInstallLocation, Mode=TwoWay}"/>
                <Button Content="Add" Command="{x:Bind ViewModel.AddAppInstallLocationCommand}"/>
            </StackPanel>
        </StackPanel>

        <!-- Section for Blocked Sites -->
        <StackPanel>
            <CheckBox Content="Block All Websites" IsChecked="{x:Bind ViewModel.BlockAllSites, Mode=TwoWay}"/>

            <!-- Visibility of this StackPanel depends on BlockAllSites -->
            <StackPanel Visibility="{x:Bind ViewModel.BlockAllSites, Converter={StaticResource BoolToVisibilityConverter}, Mode=OneWay}">
                <TextBlock Text="Blocked Websites URLs" FontWeight="Bold"/>
                <ListView ItemsSource="{x:Bind ViewModel.Event.BlockedSites.BlockedWebsiteUrls, Mode=OneWay}">
                    <ListView.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding}"/>
                        </DataTemplate>
                    </ListView.ItemTemplate>
                </ListView>
                <StackPanel Orientation="Horizontal">
                    <TextBox Width="200" PlaceholderText="Add new URL" Text="{x:Bind ViewModel.NewBlockedUrl, Mode=TwoWay}"/>
                    <Button Content="Add" Command="{x:Bind ViewModel.AddBlockedUrlCommand}"/>
                </StackPanel>
            </StackPanel>
        </StackPanel>


        <!--<TextBlock Text="{x:Bind ViewModel.ValidationErrors, Mode=OneWay}" Style="{StaticResource ErrorTemplate}" />-->
        <ItemsControl ItemsSource="{Binding ValidationErrors}" 
              ItemTemplate="{StaticResource ValidationResultTemplate}" />

        <!--<ContentPresenter x:Name="ErrorPresenter"
                          Content="{x:Bind ViewModel.ValidationErrors, Mode=OneWay}"
                          ContentTemplate="{Binding ErrorTemplate}"
                          Foreground="{ThemeResource SystemControlErrorTextForegroundBrush}"
                          AutomationProperties.AccessibilityView="Raw" />-->
        <!--x:Load="False"-->
        <!--<Button Command="{x:Bind ViewModel.SubmitCommand}" Content="Submit" />-->

        <Button Click="CancelButton_Click">Cancel</Button>
        
        
        <!--<Grid>
            <controls:InfoBar
                x:Name="SuccessInfoBar"
                Title="Success"
                Message="The form was filled in correctly."
                Severity="Success">
                <interactivity:Interaction.Behaviors>
                    <interactions:EventTriggerBehavior EventName="FormSubmissionCompleted" SourceObject="{x:Bind ViewModel}">
                        <interactions:ChangePropertyAction
                            PropertyName="IsOpen"
                            TargetObject="{x:Bind SuccessInfoBar}"
                            Value="True" />
                        <interactions:ChangePropertyAction
                            PropertyName="IsOpen"
                            TargetObject="{x:Bind FailureInfoBar}"
                            Value="False" />
                    </interactions:EventTriggerBehavior>
                </interactivity:Interaction.Behaviors>
            </controls:InfoBar>
            <controls:InfoBar
                x:Name="FailureInfoBar"
                Title="Error"
                Message="The form was filled in with some errors."
                Severity="Error">
                <controls:InfoBar.ActionButton>
                    <Button Command="{x:Bind ViewModel.ShowErrorsCommand}" Content="Show errors" />
                </controls:InfoBar.ActionButton>
                <interactivity:Interaction.Behaviors>
                    <interactions:EventTriggerBehavior EventName="FormSubmissionFailed" SourceObject="{x:Bind ViewModel}">
                        <interactions:ChangePropertyAction
                            PropertyName="IsOpen"
                            TargetObject="{x:Bind SuccessInfoBar}"
                            Value="False" />
                        <interactions:ChangePropertyAction
                            PropertyName="IsOpen"
                            TargetObject="{x:Bind FailureInfoBar}"
                            Value="True" />
                    </interactions:EventTriggerBehavior>
                </interactivity:Interaction.Behaviors>
            </controls:InfoBar>
        </Grid>-->
    </StackPanel>
</Page>

